package tho.nill.connection.ausgabe;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;

import tho.nill.sqlmock.AbfrageRepository;
import tho.nill.sqlmock.StatementBasis;

public class AusgabeStatement extends StatementBasis implements Statement {
    private Connection con;

    public AusgabeStatement(Connection con, AbfrageRepository repository) {
        super(repository);
        this.con = con;
    }

    @Override
    public void addBatch(String sql) throws SQLException {

    }

    @Override
    public void cancel() throws SQLException {

    }

    @Override
    public void clearBatch() throws SQLException {

    }

    @Override
    public void clearWarnings() throws SQLException {

    }

    @Override
    public void close() throws SQLException {
    }

    @Override
    public void closeOnCompletion() throws SQLException {
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys)
            throws SQLException {
        
        return getBooleanResult();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        
        return getBooleanResult();
    }

    @Override
    public boolean execute(String sql, String[] columnNames)
            throws SQLException {
        
        return getBooleanResult();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        
        return getBooleanResult();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return new int[] { getIntResult() };
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        
        return lookupResultSet(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        
        return getIntResult();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes)
            throws SQLException {
        
        return getIntResult();

    }

    @Override
    public int executeUpdate(String sql, String[] columnNames)
            throws SQLException {
        
        return getIntResult();
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        
        return getIntResult();

    }

    @Override
    public Connection getConnection() throws SQLException {
        return con;
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return getIntResult();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return getIntResult();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        throw new SQLFeatureNotSupportedException("Not implemented");
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return getIntResult();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return getIntResult();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return getBooleanResult();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return getBooleanResult();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return getIntResult();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return lookupResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return getIntResult();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return getIntResult();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return getIntResult();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return getIntResult();
        
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return getBooleanResult();
        
    }

    @Override
    public boolean isClosed() throws SQLException {
        return getBooleanResult();
        
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return getBooleanResult();
        
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return getBooleanResult();
        
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        if (iface.isInstance(this)) {
            return iface.cast(this);
        }
        return null;
    }

    @Override
    public void setCursorName(String arg0) throws SQLException {
    }

}
